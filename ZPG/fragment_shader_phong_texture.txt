#version 460

#define MAX_LIGHTS 8
#define POINT_LIGHT 0
#define DIRECTIONAL_LIGHT 1
#define SPOTLIGHT 2

struct Light
{
	vec3 position;
    vec3 direction;

    float constant;
    float linear;
    float quadratic;

    float spotCutOff;
    float spotOuterCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
    vec3 color;
	int type;
};

out vec4 fragmentColor; 
in vec3 worldNormal;
in vec3 worldPosition;
in vec2 texCoords;
uniform vec3 eyePosition;
uniform vec3 viewDirection;

uniform int lightsCount;
uniform Light lights[MAX_LIGHTS];

uniform sampler2D textureUnitID;

uniform int battery = 0;

vec3 processLight(Light light, vec3 fragPosition, vec3 exWorldNormal, vec3 viewPosition)
{
    // ambient
    float ambientStrength = 0.2f;
    vec3 ambient = ambientStrength * light.ambient;
   
    vec3 lightDir;
    
    if (light.type == DIRECTIONAL_LIGHT)
    {
        lightDir = normalize(-light.direction);
    }
    else if (light.type == POINT_LIGHT || light.type == SPOTLIGHT)
    {
        lightDir = normalize(light.position - fragPosition);
    }

    // diffuse
    float dotProduct = max(dot(lightDir, exWorldNormal), 0.0f);
    vec3 diffuse = dotProduct * light.diffuse * light.color;

    // specular
    float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPosition - fragPosition);
    vec3 reflectDir = reflect(-lightDir, exWorldNormal);
    float specularPart = pow(max(dot(viewDir, reflectDir), 0.0f), 32.0f);
    vec3 specular = specularStrength * specularPart * light.specular * light.color;

    // spotlight
    if (light.type == SPOTLIGHT)
    {
        float theta = dot(lightDir, normalize(-light.direction));
        float epsilon = light.spotCutOff - light.spotOuterCutOff;
        float intensity = clamp((theta - light.spotOuterCutOff) / epsilon, 0.0f, 1.0f);

        diffuse *= intensity;
        specular *= intensity;
    }

    // attenuation
    if (light.constant > 0 || light.linear > 0 || light.quadratic > 0)
    {
        float lightDistance = length(light.position - fragPosition);
        float attenuation = 1.0f / (light.constant + light.linear * lightDistance + light.quadratic * (lightDistance * lightDistance)); 

        ambient *= attenuation;
        diffuse *= attenuation;
        specular *= attenuation;
    }

    return vec3(ambient + diffuse + specular);
}

void main() {
	vec3 objectColor = vec3(0.385 ,0.647 ,0.812 );
    Light l3;
    if(battery == 1)
    {
        l3 = Light(eyePosition, viewDirection, 1.0f, 0.009f, 0.00032f, 0.9978f, 0.953f, vec3(0.1f, 0.1f, 0.1f), vec3(0.8f, 0.8f, 0.8f), vec3(1.0f, 1.0f, 1.0f), vec3(0, 1, 0), 2);
    }
    else
    {
        l3 = Light(eyePosition, viewDirection, 0.0f, 0.00f, 0.000f, 0.0f, 0.0f, vec3(0.1f, 0.1f, 0.1f), vec3(0.1f, 0.1f, 0.1f), vec3(0.1f, 0.1f, 0.1f), vec3(0.385 ,0.647 ,0.812 ), 2);
    }

    vec3 result = vec3(0.0f);
    
    for (int i = 0; i < lightsCount; i++)
    {
        result += processLight(lights[i], worldPosition, worldNormal, eyePosition);
    }

    result += processLight(l3, worldPosition, worldNormal, eyePosition);
    
    fragmentColor = vec4( result, 1.0);
    fragmentColor *= texture2D(textureUnitID, texCoords);

}